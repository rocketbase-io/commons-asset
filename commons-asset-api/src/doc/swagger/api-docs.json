{
  "swagger": "2.0",
  "info": {
    "description": "Provides services + rest-controller to handle asset with different storage engines.",
    "version": "4.6.0",
    "title": "commons-asset api",
    "contact": {
      "name": "rocketbase.io",
      "url": "https://www.rocketbase.io",
      "email": "info@rocketbase.io"
    }
  },
  "tags": [
    {
      "name": "base",
      "description": "Upload assets and query."
    },
    {
      "name": "batch",
      "description": "Batching downloads."
    },
    {
      "name": "delete",
      "description": "Delete asset from filestorage + db"
    },
    {
      "name": "download",
      "description": "Download original binary."
    },
    {
      "name": "copy",
      "description": "Copy source asset on filestorage + db."
    },
    {
      "name": "preview",
      "description": "Simple preview service."
    },
    {
      "name": "analyse",
      "description": "Analyse files without storing it."
    }
  ],
  "paths": {
    "/api/asset": {
      "get": {
        "tags": [
          "base"
        ],
        "summary": "findAll",
        "description": "page thew asset-list with optional filter parameters.",
        "operationId": "findAllUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "default 25 max is 200",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "default is 1",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "created before date (example 2011-12-03T10:15:30)",
            "required": false,
            "type": "string"
          },
          {
            "name": "after",
            "in": "query",
            "description": "created after date (example 2011-12-03T10:15:30)",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalFilename",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "referenceUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "possible types jpeg, png, gif, pdf, zip, xls, xlsx, doc, docx... allows to use multiple types for a list",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasEolValue",
            "in": "query",
            "description": "true: queries all assets that has an eol value, false: all without, null: ignore",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "keyValue",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "user needs to have key with value match (case-insensitive). format: keyValue=KEY;VALUE"
          },
          {
            "name": "isEol",
            "in": "query",
            "description": "true: queries all assets that has an eol value that is expired, false: all without or newer then now, null: ignore",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageableResult-AssetRead"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "base"
        ],
        "summary": "upload asset",
        "description": "stores given asset within datastore and read meta-information.",
        "operationId": "handleFileUploadUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "MultipartFile upload",
            "required": true,
            "type": "file"
          },
          {
            "name": "systemRefId",
            "in": "query",
            "description": "allows to store reference id from different system",
            "required": false,
            "type": "string"
          },
          {
            "name": "context",
            "in": "query",
            "description": "optional name of context (could be used to differ buckets for example)",
            "required": false,
            "type": "string"
          },
          {
            "name": "k_",
            "in": "query",
            "description": "key values need to start with k_ (will get cut/off after parsing) - value could be max 4000 chars",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetRead"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "base"
        ],
        "summary": "update asset",
        "description": "update key values",
        "operationId": "updateAssetPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updateAsset",
            "description": "mainly contains keyValues property",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAsset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetRead"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/batch": {
      "post": {
        "tags": [
          "batch"
        ],
        "summary": "proccess a batch download",
        "description": "download given urls and stores them",
        "operationId": "processBatchFileUrlsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "assetBatch",
            "description": "assetBatch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetBatchWrite"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "allows to specify required preview-url. allow multiple times. values could be xs, s, m, l, xl",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetBatchResult"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/{id}": {
      "get": {
        "tags": [
          "base"
        ],
        "summary": "get asset",
        "operationId": "getAssetUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "allows to specify required preview-url. allow multiple times. values could be xs, s, m, l, xl",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of asset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetRead"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "delete"
        ],
        "summary": "delete",
        "description": "removes entity from database + asset from datastore",
        "operationId": "deleteAssetUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of asset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/{id}/b": {
      "get": {
        "tags": [
          "download"
        ],
        "summary": "download",
        "description": "response with the original asset binaries",
        "operationId": "downloadAssetUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of asset",
            "required": true,
            "type": "string"
          },
          {
            "name": "inline",
            "in": "query",
            "description": "optional parameter to allow download as inline",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/{id}/copy": {
      "post": {
        "tags": [
          "copy"
        ],
        "summary": "copy source asset",
        "description": "response with the copied assetRead of source",
        "operationId": "copyAssetPOST",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of asset",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetRead"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/{id}/{size}": {
      "get": {
        "tags": [
          "preview"
        ],
        "summary": "getPreview",
        "operationId": "getPreviewUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of asset",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "in": "path",
            "description": "allows to specify required preview-url. values could be xs, s, m, l, xl",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/analyse": {
      "post": {
        "tags": [
          "analyse"
        ],
        "summary": "analyse upload",
        "description": "analyse given asset and read meta-information.",
        "operationId": "analyseFilePOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "MultipartFile upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetAnalyse"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/asset/analyse/batch": {
      "post": {
        "tags": [
          "analyse"
        ],
        "summary": "batch analyse",
        "description": "download given urls and analyse without storing",
        "operationId": "processBatchAnalysePOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "uriList",
            "description": "List of Urls",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UriList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetBatchAnalyseResult"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "AssetBatchResult": {
      "type": "object",
      "properties": {
        "failed": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "enum": [
              "invalid_content_type",
              "not_allowed_content_type",
              "asset_file_is_empty",
              "system_ref_id_already_used",
              "unprocessable_asset",
              "not_downloadable"
            ]
          }
        },
        "succeeded": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AssetRead"
          }
        }
      },
      "title": "AssetBatchResult"
    },
    "AssetBatchAnalyseResult": {
      "type": "object",
      "properties": {
        "failed": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "enum": [
              "invalid_content_type",
              "not_allowed_content_type",
              "asset_file_is_empty",
              "system_ref_id_already_used",
              "unprocessable_asset",
              "not_downloadable"
            ]
          }
        },
        "succeeded": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AssetAnalyse"
          }
        }
      },
      "title": "AssetBatchResult"
    },
    "AssetBatchWrite": {
      "type": "object",
      "properties": {
        "useCache":{
          "type": "boolean",
          "default": "false",
          "description": "when enabled pre check if downloadUrl has already been downloaded - then take it"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetBatchWriteEntry"
          }
        }
      },
      "title": "AssetBatchWrite"
    },
    "AssetBatchWriteEntry": {
      "type": "object",
      "properties": {
        "systemRefId": {
          "type": "string",
          "description": "optional foreign id of other system"
        },
        "context": {
          "type": "string",
          "description": "allows to store individual grouping for assets to find all picture of a flexible type. for example all avatar images or backgrounds..."
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "will get stored with lowercase, max length of 50 characters, key with _ as prefix will not get displayed in REST_API"
        },
        "url": {
          "type": "string",
          "description": "address where to download asset"
        }
      },
      "title": "AssetBatchWriteEntry"
    },
    "AssetMeta": {
      "type": "object",
      "properties": {
        "colorPalette": {
          "$ref": "#/definitions/ColorPalette"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "fileSize": {
          "type": "integer",
          "format": "int64"
        },
        "originalFilename": {
          "type": "string"
        },
        "referenceUrl": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/Resolution"
        }
      },
      "title": "AssetMeta"
    },
    "AssetAnalyse": {
      "type": "object",
      "properties": {
        "colorPalette": {
          "$ref": "#/definitions/ColorPalette"
        },
        "type": {
          "type": "string",
          "enum": [
            "jpeg",
            "png",
            "apng",
            "gif",
            "tiff",
            "bmp",
            "ico",
            "svg",
            "webp",
            "heif",
            "heic",
            "pdf",
            "zip",
            "tar",
            "rar",
            "gzip",
            "7z",
            "xls",
            "xlsx",
            "doc",
            "docx",
            "ppt",
            "pptx",
            "odp",
            "ods",
            "odt",
            "csv",
            "txt",
            "json",
            "rtf",
            "xml",
            "mpeg",
            "mp4",
            "mpv",
            "mov",
            "avi",
            "wmv",
            "webm",
            "ogv",
            "ogx",
            "aac",
            "mp3",
            "oga",
            "wav",
            "weba"
          ]
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "fileSize": {
          "type": "integer",
          "format": "int64"
        },
        "originalFilename": {
          "type": "string"
        },
        "referenceUrl": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/Resolution"
        },
        "lqip": {
          "type": "string",
          "description": "in case of enabeled lqip contain base64 image preview"
        }
      },
      "title": "AssetAnalyse"
    },
    "AssetPreviews": {
      "type": "object",
      "properties": {
        "previewMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "AssetPreviews"
    },
    "AssetRead": {
      "type": "object",
      "properties": {
        "download": {
          "type": "string",
          "description": "download url to original file when enabled"
        },
        "id": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/AssetMeta"
        },
        "previews": {
          "$ref": "#/definitions/AssetPreviews"
        },
        "systemRefId": {
          "type": "string",
          "description": "optional foreign id of other system"
        },
        "context": {
          "type": "string",
          "description": "allows to store individual grouping for assets to find all picture of a flexible type. for example all avatar images or backgrounds..."
        },
        "lqip": {
          "type": "string",
          "description": "base64 preview in ultra low-res + quality - LQIP = Low Quality Image Placeholder. Depending on config is available or null"
        },
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "eol": {
          "type": "string",
          "description": "date instant - after this time the asset could get deleted within a cleanup job"
        },
        "type": {
          "type": "string",
          "enum": [
            "jpeg",
            "png",
            "apng",
            "gif",
            "tiff",
            "bmp",
            "ico",
            "svg",
            "webp",
            "heif",
            "heic",
            "pdf",
            "zip",
            "tar",
            "rar",
            "gzip",
            "7z",
            "xls",
            "xlsx",
            "doc",
            "docx",
            "ppt",
            "pptx",
            "odp",
            "ods",
            "odt",
            "csv",
            "txt",
            "json",
            "rtf",
            "xml",
            "mpeg",
            "mp4",
            "mpv",
            "mov",
            "avi",
            "wmv",
            "webm",
            "ogv",
            "ogx",
            "aac",
            "mp3",
            "oga",
            "wav",
            "weba"
          ]
        },
        "urlPath": {
          "type": "string"
        }
      },
      "title": "AssetRead"
    },
    "UpdateAsset": {
      "type": "object",
      "properties": {
        "keyValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "will removed key that have value of null, will only add/replace new/existing key values, not mentioned key will still stay the same"
        },
        "systemRefId": {
          "type": "string",
          "description": "update it with care - needs to get updated in AssetReferences if stored anywhere..."
        },
        "eol": {
          "type": "string",
          "description": "date instant - after this time the asset could get deleted within a cleanup job"
        }
      },
      "title": "UpdateAsset"
    },
    "ColorPalette": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primary": {
          "type": "string"
        }
      },
      "title": "ColorPalette"
    },
    "File": {
      "type": "object",
      "properties": {
        "absolute": {
          "type": "boolean"
        },
        "absoluteFile": {
          "$ref": "#/definitions/File"
        },
        "absolutePath": {
          "type": "string"
        },
        "canonicalFile": {
          "$ref": "#/definitions/File"
        },
        "canonicalPath": {
          "type": "string"
        },
        "directory": {
          "type": "boolean"
        },
        "file": {
          "type": "boolean"
        },
        "freeSpace": {
          "type": "integer",
          "format": "int64"
        },
        "hidden": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "parentFile": {
          "$ref": "#/definitions/File"
        },
        "path": {
          "type": "string"
        },
        "totalSpace": {
          "type": "integer",
          "format": "int64"
        },
        "usableSpace": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "File"
    },
    "PageableResult-AssetRead": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetRead"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalElements": {
          "type": "integer",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "PageableResult-AssetRead"
    },
    "Resolution": {
      "type": "object",
      "properties": {
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Resolution"
    },
    "UriList": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "title": "UriList"
    }
  }
}